from gssapi.raw.cython_types cimport *
from gssapi.raw.oids cimport *
GSSAPI="BASE"  # This ensures that a full module is generated by Cython

from gssapi.raw.misc import GSSError
from gssapi.raw.types import IntEnumFlagSet, RequirementFlag

from gssapi.raw.sec_contexts cimport SecurityContext


cdef extern from "python_gssapi_ext.h":
    OM_uint32 gss_create_sec_context(OM_uint32 *minor_status,
                                     gss_ctx_id_t *context)

    OM_uint32 gss_set_context_flags(OM_uint32 *minor_status,
                                    gss_ctx_id_t context,
                                    uint64_t req_flags,
                                    uint64_t ret_flags_understood)


def create_sec_context():
    """
    create_sec_context()
    Creates an empty SecurityContext() for use with set_context_flags(),
    init_sec_context() and accept_sec_context().

    Returns:
        SecurityContext: an empty context

    Raises:
        GSSError
    """
    cdef OM_uint32 maj_stat, min_stat
    cdef SecurityContext out_ctx = SecurityContext()
    cdef gss_ctx_id_t ctx = GSS_C_NO_CONTEXT

    maj_stat = gss_create_sec_context(&min_stat, &ctx)

    if maj_stat == GSS_S_COMPLETE:
        out_ctx.raw_ctx = ctx
        return out_ctx
    else:
        raise GSSError(maj_stat, min_stat)


def set_context_flags(SecurityContext context, uint64_t req_flags,
                      uint64_t ret_flags_understood):
    """
    set_context_flags(context, req_flags, ret_flags_understood)
    Specifies request flags and understood return flags for use with
    init_sec_context() and accept_sec_context(). Requires a context
    previously created by create_sec_context() and not yet used with
    init_sec_context() or accept_sec_context().

    Args:
        context (SecurityContext): Context to set flags on
        req_flags (IntEnumFlagSet): Request flags for init/accept_sec_context()
        ret_flags_understood (IntEnumFlagSet): Return flags that are
            understood by the application. This is an input parameter which is
            a subset of possible ret_flags from gss_init/accept_sec_context()
            that the application supports and can understand as a ret_flag.

    Raises:
        GSSError
    """
    cdef OM_uint32 maj_stat, min_stat
    cdef uint64_t rf = IntEnumFlagSet(RequirementFlag, req_flags)
    cdef uint64_t rfu = IntEnumFlagSet(RequirementFlag, ret_flags_understood)

    maj_stat = gss_set_context_flags(&min_stat, context.raw_ctx, rf, rfu)

    if maj_stat != GSS_S_COMPLETE:
        raise GSSError(maj_stat, min_stat)
