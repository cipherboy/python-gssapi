GSSAPI="BASE"  # This ensures that a full module is generated by Cythin

from gssapi.raw.cython_types cimport *
from gssapi.raw.oids cimport OID
from gssapi.raw.names cimport Name

from gssapi.raw.misc import GSSError

cdef extern from "python_gssapi_ext.h":
    OM_uint32 gss_localname(OM_uint32 *minor,
                            const gss_name_t name,
                            const gss_OID mech_type,
                            gss_buffer_t localname)

    int gss_userok(const gss_name_t name, const char *username);


def localname(Name name not None, OID mech_type=None):
    cdef OM_uint32 maj_stat, min_stat
    cdef gss_name_t nm
    cdef gss_OID mech
    cdef gss_buffer_desc localname

    nm = name.raw_name
    
    if mech_type is None:
        mech = GSS_C_NO_OID
    else:
        mech = &mech_type.raw_oid

    localname.length = 0

    maj_stat = gss_localname(&min_stat, nm, mech, &localname)

    if maj_stat == GSS_S_COMPLETE:
        return localname.value[:localname.length]
    else:
        raise GSSError(maj_stat, min_stat)

def userok(Name name not None, bytes username not None):
    cdef gss_name_t nm
    cdef char *un

    nm = name.raw_name
    un = username

    return gss_userok(nm, un)
